application {
  config {
    applicationType monolith
    authenticationType jwt
    baseName store
    blueprints []
    buildTool gradle
    cacheProvider hazelcast
    clientFramework angularX
    clientPackageManager npm
    clientTheme none
    creationTimestamp 1624346557393
    databaseType sql
    devDatabaseType h2Disk
    dtoSuffix DTO
    enableHibernateCache true
    enableSwaggerCodegen false
    enableTranslation true
    jhiPrefix jhi
    jhipsterVersion "7.0.1"
    jwtSecretKey "NmI1NDdjNTg1NmQ2OGUzNjBjMDkyNDRhZGMwYWZiMzcyOTIzNTlhMDBhOGRiYjBmOTQ2YmZlMmU4NzJlZTA4OGUyOTYwMTVjOTkwZDEwNDMxYzFkYmY2MGUyMTYyYmI3YTNjZDg5N2UyYTcwMDMwYWI1NDg1NjIyMTU5MDY0MzY="
    languages [en, zh-cn]
    messageBroker false
    nativeLanguage en
    otherModules []
    packageName com.mycompany.store
    prodDatabaseType mysql
    reactive false
    searchEngine false
    serverPort 8080
    serviceDiscoveryType false
    skipClient false
    skipServer false
    skipUserManagement false
    testFrameworks [cypress, gatling, cucumber]
    websocket spring-websocket
    withAdminUi true
  }

  entities Customer, Invoice, OrderItem, Product, ProductCategory, ProductOrder, Shipment
}

entity Customer {
  firstName String required
  lastName String required
  gender Gender required
  email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
  phone String required
  addressLine1 String required
  addressLine2 String
  city String required
  country String required
}
entity Invoice {
  date Instant required
  details String
  status InvoiceStatus required
  paymentMethod PaymentMethod required
  paymentDate Instant required
  paymentAmount BigDecimal required
  code String required
}
entity OrderItem {
  quantity Integer required min(0)
  totalPrice BigDecimal required min(0)
  status OrderItemStatus required
}
/**
 * Product sold by the Online store
 */
entity Product {
  name String required
  description String
  price BigDecimal required min(0)
  itemSize Size required
  image ImageBlob
}
entity ProductCategory {
  name String required
  description String
}
entity ProductOrder {
  placedDate Instant required
  status OrderStatus required
  code String required
}
entity Shipment {
  trackingCode String
  date Instant required
  details String
}
enum Gender {
  MALE,
  FEMALE,
  OTHER
}
enum InvoiceStatus {
  PAID,
  ISSUED,
  CANCELLED
}
enum PaymentMethod {
  CREDIT_CARD,
  CASH_ON_DELIVERY,
  PAYPAL
}
enum OrderItemStatus {
  AVAILABLE,
  OUT_OF_STOCK,
  BACK_ORDER
}
enum Size {
  S,
  M,
  L,
  XL,
  XXL
}
enum OrderStatus {
  COMPLETED,
  PENDING,
  CANCELLED
}

relationship OneToOne {
  Customer{user} to User
}
relationship OneToMany {
  ProductOrder{invoice} to Invoice{order}
  ProductOrder{orderItem} to OrderItem{order}
  ProductCategory{product} to Product{productCategory}
  Customer{order} to ProductOrder{customer}
  Invoice{shipment} to Shipment{invoice}
}
relationship ManyToOne {
  OrderItem{product} to Product
}

paginate Customer, Invoice, OrderItem, Product, ProductOrder, Shipment with pagination
service Customer, Invoice, OrderItem, Product, ProductCategory, ProductOrder, Shipment with serviceClass
